// Generated by CoffeeScript 1.3.1
(function() {
  var Fodder, root;

  Fodder = (function() {

    Fodder.name = 'Fodder';

    function Fodder(options) {
      if (options == null) {
        options = {};
      }
      this.name = options['name'] || '';
      this.amount = options['amount'] || 0;
      this.solids = options['solids'] || 0;
      this.energy = options['energy'] || 0;
      this.protein = options['protein'] || 0;
      this.calcium = options['calcium'] || 0;
      this.phosphor = options['phosphor'] || 0;
      this.magnesium = options['magnesium'] || 0;
      this.selenium = options['selenium'] || 0;
    }

    Fodder.prototype.setName = function(name) {
      return this.name = name;
    };

    Fodder.prototype.setAmount = function(amount) {
      return this.amount = amount;
    };

    Fodder.prototype.__isValidNumber = function(original) {
      var asNum;
      asNum = Number(original.replace(',', '.'));
      if (isNaN(asNum)) {
        throw new Error("" + original + " is not a valid number");
      } else {
        return asNum;
      }
    };

    Fodder.prototype.setSolids = function(solidsString) {
      return this.solids = this.__isValidNumber(solidsString);
    };

    Fodder.prototype.setEnergy = function(energyString) {
      return this.energy = this.__isValidNumber(energyString);
    };

    Fodder.prototype.setProtein = function(proteinString) {
      return this.protein = this.__isValidNumber(proteinString);
    };

    Fodder.prototype.setCalcium = function(calciumString) {
      return this.calcium = this.__isValidNumber(calciumString);
    };

    Fodder.prototype.setPhosphor = function(phosphorString) {
      return this.phosphor = this.__isValidNumber(phosphorString);
    };

    Fodder.prototype.setMagnesium = function(magnesiumString) {
      return this.magnesium = this.__isValidNumber(magnesiumString);
    };

    Fodder.prototype.setSelenium = function(seleniumString) {
      return this.selenium = this.__isValidNumber(seleniumString);
    };

    return Fodder;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Fodder = Fodder;

}).call(this);
