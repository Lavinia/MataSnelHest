// Generated by CoffeeScript 1.3.1
(function() {
  var Fodder, root;

  Fodder = (function() {

    Fodder.name = 'Fodder';

    function Fodder(options) {
      if (options == null) {
        options = {};
      }
      this.name = options['name'] || '';
      this.amount = options['amount'] || 0;
      this.solids = options['solids'] || 0;
      this.energy = options['energy'] || 0;
      this.protein = options['protein'] || 0;
      this.calcium = options['calcium'] || 0;
      this.phosphor = options['phosphor'] || 0;
      this.magnesium = options['magnesium'] || 0;
      this.selenium = options['selenium'] || 0;
    }

    Fodder.prototype.setName = function(name) {
      return this.name = name;
    };

    Fodder.prototype.setAmount = function(amount) {
      return this.amount = amount;
    };

    Fodder.prototype.__isValidNumber = function(converted, original) {
      if (isNaN(converted)) {
        throw new Error("" + original + " is not a valid number");
      }
    };

    Fodder.prototype.__stringToNum = function(string) {
      return Number(string);
    };

    Fodder.prototype.__replaceCommas = function(string) {
      return string.replace(',', '.');
    };

    Fodder.prototype.setSolids = function(solidsString) {
      var convertedSolids, solidsInPercent;
      solidsInPercent = solidsString.replace(',', '.');
      convertedSolids = Number(solidsInPercent);
      this.__isValidNumber(convertedSolids, solidsInPercent);
      return this.solids = convertedSolids;
    };

    Fodder.prototype.setEnergy = function(energyString) {
      var energy;
      energy = this.__replaceCommas(energyString);
      this.__isValidNumber(this.__stringToNum(energy), energy);
      return this.energy = this.__stringToNum(energy);
    };

    Fodder.prototype.setProtein = function(proteinString) {
      var convertedProtein, protein;
      protein = proteinString.replace(',', '.');
      convertedProtein = Number(protein);
      this.__isValidNumber(convertedProtein, protein);
      return this.protein = convertedProtein;
    };

    Fodder.prototype.setCalcium = function(calciumString) {
      var calcium, convertedCalcium;
      calcium = calciumString.replace(',', '.');
      convertedCalcium = Number(calcium);
      this.__isValidNumber(convertedCalcium, calcium);
      return this.calcium = convertedCalcium;
    };

    Fodder.prototype.setPhosphor = function(phosphorString) {
      var convertedPhosphor, phosphor;
      phosphor = phosphorString.replace(',', '.');
      convertedPhosphor = Number(phosphor);
      this.__isValidNumber(convertedPhosphor, phosphor);
      return this.phosphor = convertedPhosphor;
    };

    Fodder.prototype.setMagnesium = function(magnesiumString) {
      var convertedMagnesium, magnesium;
      magnesium = magnesiumString.replace(',', '.');
      convertedMagnesium = Number(magnesium);
      this.__isValidNumber(convertedMagnesium, magnesium);
      return this.magnesium = convertedMagnesium;
    };

    Fodder.prototype.setSelenium = function(seleniumString) {
      var convertedSelenium, selenium;
      selenium = seleniumString.replace(',', '.');
      convertedSelenium = Number(selenium);
      this.__isValidNumber(convertedSelenium, selenium);
      return this.selenium = convertedSelenium;
    };

    return Fodder;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Fodder = Fodder;

}).call(this);
